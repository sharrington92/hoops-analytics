---
title: "Get Play-by-Play Data"
format: html
---

## Setup

```{r setup_packages}
library(tidyverse)
library(duckdb)
library(DBI)
library(bigballR)
library(duckplyr)
library(ncaahoopR)
library(rvest)

```


```{r setup}

drop.table <- function(table){
  dbSendQuery(duck.con, paste(
    "DROP TABLE", table
  ))
  
}

trunc.table <- function(table){
  dbSendQuery(duck.con, paste(
    "TRUNCATE TABLE", table
  ))
}


```



```{r inputs}

dates <- seq.Date(
  from = ymd("2023-11-06"),
  to = ymd("2024-4-8"),
  by = "1 day"
)





```


```{r setup_duckdb}
# Create/reference
ddb <- duckdb(file.path("data", "hoopsdb.duckdb"))

# Connect
duck.con <- dbConnect(ddb)
```

## Data Model

### Create database tables

We need to create tables in the database to store games data. The relational data model will contain the following tables:

- schools (dimension)
- seasons (dimension)
- players (dimension)
- coaches (dimension)
- teams (dimension): intersection between school and season.
- rosters (dimension): intersection between team, coach, and players
- games (fact)
- boxscores (fact)
- play_by_play (fact)

```{r duckdb_school}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS schools (
    school_id INT PRIMARY KEY,
    ncaa_name TEXT,
    espn_name TEXT,
    primary_color TEXT,
    secondary_color TEXT,
    tertiary_color TEXT,
    color_4 TEXT,
    color_5 TEXT,
    color_6 TEXT,
    logo_url TEXT
  )"
)

```

```{r duckdb_seasons}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS seasons (
    season_id INT PRIMARY KEY,
    season TEXT
  )"
)

```

```{r duckdb_players}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS players (
    player_id INT PRIMARY KEY,
    name TEXT, 
    name_last TEXT,
    name_first TEXT,
    hometown TEXT,
    high_school TEXT
  )"
)

```

```{r duckdb_coach}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS rosters (
    coach_id INT PRIMARY KEY,
    coach_name TEXT, 
    coach_name_last TEXT,
    coach_name_first TEXT
  )"
)

```

```{r duckdb_team}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS teams (
    team_id INT PRIMARY KEY,
    season_id INT,
    school_id INT,
    conf TEXT,
    FOREIGN KEY (school_id) REFERENCES schools (school_id),
    FOREIGN KEY (season_id) REFERENCES seasons (season_id)
  )"
)

```

```{r duckdb_roster}
#| eval: false


dbSendQuery(
  duck.con,
  "CREATE SEQUENCE IF NOT EXISTS roster_id_seq START 1;
   CREATE TABLE IF NOT EXISTS rosters (
    roster_id INT DEFAULT nextval('roster_id_seq'),
    team_id INT, 
    player_id INT,
    games_play INT,
    games_start INT,
    jersey INT,
    class TEXT,
    position TEXT,
    height_in DECIMAL(6, 3),
    
    UNIQUE(roster_id),
    PRIMARY KEY (team_id, player_id),
    FOREIGN KEY (player_id) REFERENCES players (player_id),
    FOREIGN KEY (team_id) REFERENCES teams (team_id)
  );"
)

```

```{r duckdb_games}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS games (
    game_id INT PRIMARY KEY,
    box_id INT NOT NULL,
    date DATE,
    start_time TIME,
    home TEXT NOT NULL, 
    away TEXT NOT NULL, 
    home_score INT,
    away_score INT,
    attendance INT,
    neutral_site BOOL,
    home_win TINYINT,
    home_loss TINYINT,
    away_win TINYINT,
    away_loss TINYINT
  )"
)

```

```{r duckdb_box}
#| eval: false
#| 
dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS box (
    game_id INT,
    player_id INT,
    tech INT,
    fouls INT,
    blocks INT,
    steals INT,
    turnover INT,
    assist INT,
    rebound_total INT,
    rebound_def INT,
    rebound_off INT,
    points INT,
    freethrow_pct DECIMAL(6, 3),
    
    FOREIGN KEY (game_id) REFERENCES games (game_id),
    FOREIGN KEY (player_id) REFERENCES players (player_id)
  )"
)

```

```{r duckdb_pbp}
#| eval: false
#| 
dbSendQuery(
  duck.con,
  "CREATE TABLE IF NOT EXISTS play_by_play (
    pbp_id IDENTITY(1,1) BIGINT PRIMARY KEY,
    game_id INT NOT NULL,
    half_status TINYINT NOT NULL,
    game_time TIME NOT NULL,
    game_seconds INT NOT NULL,
    home_score INT NOT NULL,
    away_score INT NOT NULL,
    event_team TEXT,
    event_descr TEXT,
    player1 TExT,
    player2 TEXT,
    event_type TEXT,
    event_result TEXT,
    shot_value INT,
    event_length DECIMAL(5,2),
    poss_num INT,
    poss_team TEXT,
    poss_length DECIMAL(5,2),
    is_transition BOOL,
    home_p1 TEXT,
    home_p2 TEXT,
    home_p3 TEXT,
    home_p4 TEXT,
    home_p5 TEXT,
    away_p1 TEXT,
    away_p2 TEXT,
    away_p3 TEXT,
    away_p4 TEXT,
    away_p5 TEXT,
    status TEXT,
    garbage_time BOOL,
    sub_deviate INT,
    
    FOREIGN KEY (game_id) REFERENCES games (game_id),
    FOREIGN KEY (event_team) REFERENCES teams (team_id),
    FOREIGN KEY (poss_team) REFERENCES teams (team_id),
    FOREIGN KEY (player1) REFERENCES players (player_id),
    FOREIGN KEY (player2) REFERENCES players (player_id),
    
    CHECK (half_status IN (1,2))
  )"
)

```

### Populate tables

```{r insert_schools}
#| eval: false

school_ids_input <- read_lines(
    file.path("data", "html-extract-ncaa-team-ids.txt"),
    skip = 0
  ) %>% 
  as_tibble() %>% 
  mutate(
    school_id = str_extract(value, '(?<=value=\\")([0-9]+)'),
    ncaa_name = str_extract(value, '(?<=\\>).*(?=\\<)')
  ) %>% 
  select(school_id, ncaa_name) %>% 
  left_join(
    y = ncaahoopR::ncaa_colors %>% 
      select(-c(color_3, conference)),
    by = "ncaa_name"
  ) %>% 
  group_by(ncaa_name) %>% 
  slice_min(order_by = as.numeric(school_id), n = 1) %>% 
  ungroup()

school_ids_input %>% 
  dbAppendTable(duck.con, "schools", .)

```

```{r insert_seasons}
#| eval: false

tibble(season_id = seq(1950, 2099, 1)) %>% 
  mutate(
    season = paste(season_id-1, season_id %%100, sep = "-")
  ) %>% 
  dbAppendTable(duck.con, "seasons", .)

```

```{r insert_teams}
#| eval: false

bigballR::teamids %>% 
  rename(team_id = ID, conf = Conference) %>% 
  rename_with(str_to_lower) %>% 
  left_join(
    y = tbl(duck.con, "seasons") %>% 
      collect(),
    by = "season"
  ) %>% 
  mutate(i = row_number()) %>% 
  left_join(
    y = tbl(duck.con, "schools") %>% 
      select(school_id, ncaa_name) %>% 
      collect(),
    by = c("team" = "ncaa_name")
  ) %>% 
  select(team_id, season_id, school_id, conf) %>% 
  dbAppendTable(duck.con, "teams", .)

```

To create the players dimension table, we first must get all the players from the team rosters as the player_id is inside the url for each player name. We'll need to create our own function to get the players and the player_id from the rosters and insert them into a temporary table. 

```{r prep_roster}
#| eval: false
get_rosters <- function(team.id){
    
    url <- paste0("https://stats.ncaa.org/teams/", team.id, "/roster")
    
    webpage <- read_html(url)
    
    tables <- webpage %>% html_nodes("table")
    
    # Extract the first table (modify the index if necessary)
    roster_table <- tables[[1]] %>% html_table(fill = TRUE)
    
    # Extract the table node again to access the HTML elements
    roster_table_node <- tables[[1]]
    
    # Convert the table to a list of rows
    rows <- roster_table_node %>% html_nodes("tr")
    
    player_ids <-sapply(rows[-1], \(x){
      html_nodes(x, "td")[4]  %>%
        html_node("a") %>%
        html_attr("href") %>% 
        str_extract("(?<=players/).*")
    })
    
    roster_table %>% 
      bind_cols(
        tibble(player_id = player_ids)
      ) %>% 
      rename_with(str_to_lower) %>% 
      rename(
        player_name = name,
        games_played = gp,
        games_start = gs,
        jersey = `#`,
        high_school = `high school`
      ) %>% 
      return()
}

# Create temp table to store raw rosters
dbSendQuery(
  duck.con, 
  "CREATE temp TABLE temp_roster (
    team_id INT,
    player_id TEXT,
    player_name TEXT,
    games_played TEXT,
    games_start TEXT,
    jersey TEXT,
    class TEXT,
    position TEXT,
    height TEXT,
    hometown TEXT,
    high_school TEXT
  )
  "
)

tbl(duck.con, "teams") %>% 
  filter(!is.na(conf)) %>% 
  filter(season_id == 2024) %>% 
  select(team_id) %>% 
  collect() %>%
  pull(team_id) %>%
  lapply(\(t){
    print(t)
    get_rosters(team.id = t) %>% 
      mutate(team_id = t) %>% 
      dbAppendTable(duck.con, "temp_roster", .)
  })

```

We'll extract the player information to populate the players table.

```{r insert_players}
#| eval: false

dbSendQuery(
  duck.con,
  "INSERT INTO players
    SELECT 
      CAST(player_id as INT) AS player_id, 
      player_name as name, 
      REGEXP_EXTRACT(player_name, '^(\\S+)', 1) AS name_first,
      TRIM(LTRIM(player_name, name_first)) AS name_last,
      hometown, 
      high_school
    FROM temp_roster
  "
)
```


```{r insert_rosters}
#| eval: false

dbSendQuery(
  duck.con, 
  "INSERT INTO rosters
  SELECT
    nextval('roster_id_seq') AS roster_id,
    team_id,
    CAST(player_id AS INT) AS player_id,
    CAST(games_played AS INT) AS games_play,
    CAST(games_start AS INT) AS games_start,
    CAST(jersey AS INT) AS jersey,
    class,
    position,
    (
      TRY_CAST(height[1] AS DOUBLE)*12 + TRY_CAST(height[3:4] AS DOUBLE)
    ) AS height_in
  FROM temp_roster
  "
)

```


```{r prep_games}
#| eval: false

dbSendQuery(
  duck.con,
  "CREATE TEMP TABLE IF NOT EXISTS games_temp (
    game_id TEXT,
    box_id TEXT,
    date DATE,
    start_time TEXT,
    home TEXT, 
    away TEXT, 
    home_score TEXT,
    away_score TEXT,
    attendance TEXT,
    neutral_site TEXT,
    home_win TEXT,
    home_loss TEXT,
    away_win TEXT,
    away_loss TEXT
  )"
)

lapply(dates, \(d){
  print(d)
  tryCatch({
    g <- bigballR::get_date_games(date = format(d, "%m/%d/%Y")) %>% 
      as_tibble() %>% 
      rename_with(str_to_lower) %>% 
      rename_with(~str_replace(.x, "id$", "_id")) %>% 
      rename_with(~str_replace(.x, "wins$", "win")) %>% 
      rename_with(~str_replace(.x, "losses$", "loss")) %>% 
      filter(!is.na(game_id)) %>% # This filters out cancelled games
      mutate(
        date = mdy(date),
        start_time = paste(date, start_time) %>% 
          ymd_hm() %>% format("%T"),
        across(
          c(home_score, away_score, home_win, home_loss,
            away_win, away_loss),
          as.numeric
        ),
        attendance = str_replace(attendance, ",", "") %>% as.integer()
      )
      
      g %>% 
      dbAppendTable(duck.con, "games_temp", ., append = TRUE)
  },
  error = function(e) {
    message("API call failed: ", e$message)
    return(NULL)
  })
  
  
})


```


```{r insert_games}
#| eval: false


tbl(duck.con, "teams") %>% glimpse()
tbl(duck.con, "schools") %>% glimpse()
tbl(duck.con, "games_temp") %>% glimpse()

dbGetQuery(
  duck.con, 
  "--INSERT INTO games
  SELECT
    CAST(game_id AS INT) AS game_id,
    CAST(box_id AS INT) AS box_id,
    date,
    start_time,
    th.team_id AS home_team_id,
    ta.team_id AS away_team_id,
    CAST(home_score AS INT) AS home_score,
    CAST(away_score AS INT) AS away_score,
    CAST(attendance AS INT) AS attendance
    
  FROM 
    games_temp gt
    JOIN schools sh ON sh.ncaa_name = gt.home
    JOIN teams th ON sh.school_id = th.school_id
    JOIN schools sa ON sa.ncaa_name = gt.away
    JOIN teams ta ON sa.school_id = ta.school_id
  "
) %>% 
  glimpse()


```



```{r sandbox}
#| eval: false
#| 
bigballR::get_box_scores(game_ids = "3954955")
bigballR::get_team_stats()
get_team_roster(team.id = "450680") # error
pbp <- bigballR::get_play_by_play(game_ids = "3954955")


bigballR::teamids %>% filter(Team == "Gonzaga")
colnames(games)

nrow(games) == length(unique(games$GameID))

dbListTables(duck.con)

g$start_time[1] %>% as.character()
games.con

dbGetQuery(duck.con, "SELECT COUNT(game_id) FROM games")
```


```{r}
games.con <- tbl(duck.con, "games_temp") 

games.con %>% 
  filter(is.na(home_win))

```


```{r}

inner_join(
  tbl(duck.con, "teams"),
  tbl(duck.con, "schools")
) %>% 
  collect() %>%
  View()

teams <- tbl(duck.con, "teams") %>% collect()
schools <- tbl(duck.con, "schools") %>% collect()

```


```{r}


date2 <- gsub("[/]", "%2F", date)
url_text <- paste0("https://stats.ncaa.org/season_divisions/", 
                   seasonid, "/scoreboards?game_date=", date2, "&conference_id=", 
                   conferenceid, "&commit=Submit")
file_dir <- paste0(base_path, "date_games/")
file_path <- paste0(file_dir, date2, "_", conferenceid, 
                    ".html")

file_url <- url(url_text, headers = c(`User-Agent` = "My Custom User Agent"))
html <- readLines(con = file_url, warn = F)
close(file_url)



{
  season.id <- "18221"
  conference.id <- "922"
  date <- ymd("2023-11-6")
  
  
  base.url <- paste0(
    "https://stats.ncaa.org/season_divisions/", 
    season.id, "/scoreboards?game_date=", date, "&conference_id=", 
    conference.id, "&commit=Submit"
  )
  url <- url(base.url, headers = c(`User-Agent` = "My Custom User Agent"))
  
  webpage <- read_html(base.url)
  XML::xml(temp)
  url.read <- read_lines(url) 
  x1 <- url.read %>% XML::xmlParseString()
  x
  View(temp)
  
  close(url)
  
  table <- XML::readHTMLTable(temp)
  View(table[[1]])
  
  webpage <- read_html(base.url)
  tables <- webpage %>% html_nodes("table")
  
  tables[[1]] %>%  # %>% html_table(fill = TRUE) #%>% 
    View()
  
  # Extract the first table (modify the index if necessary)
  roster_table <- tables[[1]] %>% html_table(fill = TRUE)
  
  # Extract the table node again to access the HTML elements
  roster_table_node <- tables[[1]]
  
  # Convert the table to a list of rows
  rows <- roster_table_node %>% html_nodes("tr")
  
  player_ids <-sapply(rows[-1], \(x){
    html_nodes(x, "td")[4]  %>%
      html_node("a") %>%
      html_attr("href") %>% 
      str_extract("(?<=players/).*")
  })
  
  roster_table %>% 
    bind_cols(
      tibble(player_id = player_ids)
    ) %>% 
    rename_with(str_to_lower) %>% 
    rename(
      player_name = name,
      games_played = gp,
      games_start = gs,
      jersey = `#`,
      high_school = `high school`
    ) %>% 
    return()
  
}
```


```{r}

u <- "https://stats.ncaa.org/season_divisions/18221/scoreboards?game_date=2023-11-06&conference_id=922&commit=Submit"

req <- request(u) %>% 
  req_headers(`User-Agent` = "My Custom User Agent")

resp <- req %>% 
  req_perform()

r2 <- resp %>% 
  resp_body_string()

r2

```

